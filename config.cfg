[PLUGIN_CONFIGS]
#username - The username on cloud instances with which they can be accessed. For instance, ubuntu, ec2-user, etc.
username = ec2-user

# NUM_DATACENTERS defines the number of data centers against which the training dataset is collected
NUM_DATACENTERS = 8

# ACT_DATACENTERS defines the dynamic number of data centers (< NUM_DATACENTERS) against which the already trained model is being evaluated
ACT_DATACENTERS = 8

# RUN_MODE defines what to capture in BWs measurements: 'STATIC' vs 'DYNAMIC' vs 'BOTH'
RUN_MODE = BOTH

# runInterval defines the frequency at which the montoring should be run; 'once' denotes running the monitoring tool just once, '1s' or '2s' denote at the interval of 1 second or 2 seconds, 1d' or '2d' denote at the interval of 1 day or 2 days, '1w' or '2w' denote at the interval of 1 week or 2 week, '1m' or '2m' denote at the interval of 1 month of 2 months, respectively. Note that the tool considers each month as 30 days based on the average number of days in a month
runInterval = once

# cnn model path. This is the directory where the trained model will be saved. This key is only honored if isCNNModelTrainingEnabled is set to True
cnnOutputPath = cnn_model

# cnn model training flag
buildModel = True

# only cnn model training using the datasetPath directory defined below
cnnTrainModeOnly = True

# datasetPath defines the output directory to store the generated datasets. Each dataset sample is contained in 2 files: static.json contains the static pair-wise bandwidths and dynamic.json contains the dynamic bandwidth values between interacting datacenters. If the path does not exist, then the script will create it.
datasetPath = datasets

# datasetPathForRefactor defines the output directory to refer for ACT_DATACENTERS monitoring info. If ACT_DATACENTERS and NUM_DATACENTERS are same, then this config is ignored.
datasetPathForRefactor = test_datasets/genRef

# Base port for monitoring bandwidth. Ensure that at least x number of ports are successively available, where x is the number of participating instances for bandwidth measurement.
basePort = 5000

# dataset size - this defines the number of samples to be generated. Each sample contains static*.json and dynamic*.json. Default value is 10!
datasetSize = 101

# resumeDatasetFromIndex - this flag resumes the dataset generation from given index. It is useful if there was some error in between the previous run and therefore, new samples need to continue from where it last ended. This can also be used for incremental dataset generation. Default value is 1, which means begin from the start. Make sure that no file with index 1 through "datasetSize" exists in the datasetPath directory, otherwise the code will throw an error.
resumeDatasetFromIndex = 101

# maxRetries in the event of failure, error or any other exception.
maxRetries = 3

# Private key path for accessing the instances. This is needed to send monitors and collect bandwidth information.
privateKeyPath = keys/ec2.pem

isPrivateIPUsageEnabled = True

# If debugging is enabled, then additional logs will be printed to trace the control flow in respective scripts.
isDebugEnabled = True

# If status progress message is enabled, then the system will print status messages at important stages. This can be used by end-user to actively track the completion of the samples generation.
statusProgressMsgEnabled = True

# spawn instances from scratch. If not using these, comment them out.
[LAUNCH_CONFIGS]
AMIs = {"us-east-1": "ami-0a06804923e0cfa3c", "us-west-1": "ami-0e98132d85f69e6e0", "ap-south-1": "ami-0e59eb4625f37c390", "ap-southeast-1": "ami-0215edca4eda24c8c", "ap-southeast-2": "ami-05411461bde22fe8c", "ap-northeast-1": "ami-01df0e1d6ff3ff95c", "eu-west-1": "ami-0b97a2ee7a9edb078", "sa-east-1": "ami-0b889c2b15512d561"}

Subnets = {"us-east-1": "subnet-05b84b77c7c589c85", "us-west-1": "subnet-03c8adad4f91b0a2b", "ap-south-1": "subnet-0a91145b2e3d942b9", "ap-southeast-1": "subnet-023f4278e7588fad1", "ap-southeast-2": "subnet-050deab427c8bebae", "ap-northeast-1": "subnet-023cdd281b13d778c", "eu-west-1": "subnet-05128699bc809f550", "sa-east-1": "subnet-0c4d77c89648a0b8b"}

instanceType = t3.nano
